import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "additionalfunctions.h"
        name: "AdditionalFunctions"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["content/AdditionalFunctions 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Method {
            name: "fileSysPathtoURL"
            type: "QString"
            Parameter { name: "path"; type: "QString" }
        }
        Method {
            name: "uriToFileSysPath"
            type: "QString"
            Parameter { name: "uri"; type: "QUrl" }
        }
    }
    Component {
        file: "backupactions.h"
        name: "BackupActions"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["content/BackupActions 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "isTaskActive"
            type: "bool"
            read: "isTaskActive"
            write: "setIsTaskActive"
            notify: "isTaskActiveChanged"
            index: 0
            isFinal: true
        }
        Signal { name: "isTaskActiveChanged" }
        Method {
            name: "getParam"
            type: "QString"
            Parameter { name: "section"; type: "QString" }
            Parameter { name: "param"; type: "QString" }
        }
        Method {
            name: "setParam"
            Parameter { name: "section"; type: "QString" }
            Parameter { name: "param"; type: "QString" }
            Parameter { name: "value"; type: "QString" }
        }
        Method { name: "doBackup" }
        Method { name: "setTaskToBackup" }
        Method { name: "deleteTaskToBackup" }
        Method { name: "isTaskExist"; type: "bool" }
        Method {
            name: "restoreFromBackup"
            Parameter { name: "backupFilePath"; type: "QString" }
        }
    }
    Component {
        file: "constants.h"
        name: "Constants"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["content/Constants 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Property {
            name: "settingsFile"
            type: "QString"
            read: "settingsFile"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "backupCategoryName"
            type: "QString"
            read: "backupCategoryName"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "databaseCategoryName"
            type: "QString"
            read: "databaseCategoryName"
            index: 2
            isReadonly: true
            isConstant: true
        }
    }
    Component {
        file: "mainsqlconnection.h"
        name: "MainSQLConnection"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["content/MainSQLConnection 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Property {
            name: "userinfo"
            type: "UserInfo"
            read: "userinfo"
            write: "setUserinfo"
            notify: "userinfoChanged"
            index: 0
            isFinal: true
        }
        Signal { name: "userinfoChanged" }
        Method { name: "getAllViews"; type: "QStringList" }
        Method { name: "getAllTables"; type: "QStringList" }
        Method {
            name: "getAllColumns"
            type: "QStringList"
            Parameter { name: "tablename"; type: "QString" }
        }
        Method {
            name: "getPKColumn"
            type: "QString"
            Parameter { name: "tablename"; type: "QString" }
        }
        Method {
            name: "getFKColumns"
            type: "QHash<QString,std::pair<QString,QString>>"
            Parameter { name: "tablename"; type: "QString" }
        }
        Method {
            name: "getAdditionalColumnInfo"
            type: "ColumnInfo"
            Parameter { name: "tablename"; type: "QString" }
            Parameter { name: "columname"; type: "QString" }
        }
        Method {
            name: "getColumnsInfo"
            type: "QVariantList"
            Parameter { name: "tablename"; type: "QString" }
        }
        Method {
            name: "getFKValues"
            type: "QVariantList"
            Parameter { name: "table"; type: "QString" }
            Parameter { name: "column"; type: "QString" }
        }
        Method {
            name: "addLog"
            type: "bool"
            Parameter { name: "action_id"; type: "qlonglong" }
            Parameter { name: "staff_id"; type: "qlonglong" }
            Parameter { name: "action_description"; type: "QJsonDocument" }
        }
        Method {
            name: "deleteRecord"
            type: "bool"
            Parameter { name: "tablename"; type: "QString" }
            Parameter { name: "column_id"; type: "QString" }
            Parameter { name: "column_value"; type: "QString" }
        }
        Method {
            name: "updateRecord"
            type: "QString"
            Parameter { name: "tablename"; type: "QString" }
            Parameter { name: "columns"; type: "QVariantList" }
            Parameter { name: "values"; type: "QVariantList" }
            Parameter { name: "id_column"; type: "QString" }
            Parameter { name: "id_value"; type: "QString" }
        }
        Method {
            name: "insertRecord"
            type: "QString"
            Parameter { name: "tablename"; type: "QString" }
            Parameter { name: "columns"; type: "QVariantList" }
            Parameter { name: "values"; type: "QVariantList" }
        }
        Method {
            name: "autorize"
            type: "UserInfo"
            Parameter { name: "Login"; type: "QString" }
            Parameter { name: "Password"; type: "QString" }
        }
    }
    Component {
        file: "qabstractitemmodel.h"
        name: "QAbstractTableModel"
        accessSemantics: "reference"
        prototype: "QAbstractItemModel"
    }
    Component {
        file: "qsqlquerymodel.h"
        name: "QSqlQueryModel"
        accessSemantics: "reference"
        prototype: "QAbstractTableModel"
    }
    Component {
        file: "qsqlrelationaltablemodel.h"
        name: "QSqlRelationalTableModel"
        accessSemantics: "reference"
        prototype: "QSqlTableModel"
        Method {
            name: "revertRow"
            Parameter { name: "row"; type: "int" }
        }
    }
    Component {
        file: "qsqltablemodel.h"
        name: "QSqlTableModel"
        accessSemantics: "reference"
        prototype: "QSqlQueryModel"
        Signal {
            name: "primeInsert"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "record"; type: "QSqlRecord&" }
        }
        Signal {
            name: "beforeInsert"
            Parameter { name: "record"; type: "QSqlRecord&" }
        }
        Signal {
            name: "beforeUpdate"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "record"; type: "QSqlRecord&" }
        }
        Signal {
            name: "beforeDelete"
            Parameter { name: "row"; type: "int" }
        }
        Method { name: "select"; type: "bool" }
        Method {
            name: "selectRow"
            type: "bool"
            Parameter { name: "row"; type: "int" }
        }
        Method { name: "submit"; type: "bool" }
        Method { name: "revert" }
        Method { name: "submitAll"; type: "bool" }
        Method { name: "revertAll" }
    }
    Component {
        file: "tablemodel.h"
        name: "TableModel"
        accessSemantics: "reference"
        prototype: "QSqlRelationalTableModel"
        exports: ["content/TableModel 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "SortEnum"
            values: ["ASC", "DESC"]
        }
        Property {
            name: "tablename"
            type: "QString"
            read: "tablename"
            write: "setTablename"
            notify: "tablenameChanged"
            index: 0
            isFinal: true
        }
        Signal { name: "tablenameChanged" }
        Method {
            name: "setQuery"
            type: "QString"
            Parameter { name: "query"; type: "QString" }
        }
        Method {
            name: "setFilterQML"
            Parameter { name: "column"; type: "QString" }
            Parameter { name: "value"; type: "QString" }
        }
        Method {
            name: "setSortQML"
            Parameter { name: "column"; type: "QString" }
            Parameter { name: "sortorder"; type: "SortEnum" }
        }
    }
    Component {
        file: "wordandprint.h"
        name: "WordAndPrint"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["content/WordAndPrint 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Method {
            name: "importInWord"
            type: "bool"
            Parameter { name: "tablename"; type: "QString" }
        }
    }
}
